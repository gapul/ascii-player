name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to catch regressions
    - cron: '0 0 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            deps: sudo apt-get update && sudo apt-get install -y ffmpeg libavformat-dev libavcodec-dev libavutil-dev pkg-config
          - os: macos-latest
            deps: brew install ffmpeg pkg-config

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: ${{ matrix.deps }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Create test video
      run: |
        mkdir -p tests/assets
        ffmpeg -f lavfi -i testsrc=duration=2:size=160x120:rate=10 -pix_fmt yuv420p tests/assets/sample.mp4 -y

    - name: Test with sample video
      run: timeout 10s target/debug/ascii-player tests/assets/sample.mp4 || true

  nix:
    name: Nix Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Check flake
      run: nix flake check

    - name: Build with Nix
      run: nix build

    - name: Test Nix shell
      run: nix develop --command cargo --version

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y ffmpeg libavformat-dev libavcodec-dev libavutil-dev pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}

  release:
    name: Release Build
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            deps: sudo apt-get update && sudo apt-get install -y ffmpeg libavformat-dev libavcodec-dev libavutil-dev pkg-config
          - os: macos-latest
            target: x86_64-apple-darwin
            deps: brew install ffmpeg pkg-config
          - os: macos-latest
            target: aarch64-apple-darwin
            deps: brew install ffmpeg pkg-config

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: ${{ matrix.deps }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: strip target/${{ matrix.target }}/release/ascii-player

    - name: Create archive
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          tar czf ../../../ascii-player-${{ matrix.target }}.tar.gz ascii-player
        else
          tar czf ../../../ascii-player-${{ matrix.target }}.tar.gz ascii-player
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ascii-player-${{ matrix.target }}
        path: ascii-player-${{ matrix.target }}.tar.gz